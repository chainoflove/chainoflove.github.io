<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[侧边栏信息展示效果]]></title>
      <url>%2F2017%2F01%2F27%2F%E4%BE%A7%E8%BE%B9%E6%A0%8F%E4%BF%A1%E6%81%AF%E5%B1%95%E7%A4%BA%E6%95%88%E6%9E%9C%2F</url>
      <content type="text"><![CDATA[功能实现TODO： 点击sidebar下方的关闭按钮（x），sidebar向左方滑出屏幕，关闭按钮向右方滑动，同时旋转为（+）。 点击加号（+），sidebar向右滑动，加号（+）向左滑动，并旋转为（x）。 点击sidebar上方的菜单栏，相应的内容栏（从左向右）滑动。 如果有已经打开的内容栏，则已打开的内容栏关闭，新点击的相应的内容栏从下往上滑动。 打开的内容栏的右上方有关闭按钮（&lt;），点击后内容栏从右向左滑动并关闭。 完整性约束。如果已经有打开的内容栏，点击sidebar下方的关闭按钮，则sidebar关闭，已经打开的内容栏也应该关闭。 案例实现步骤： 实现HTML文档结构 编写JavaScript代码，添加相应的事件、函数和逻辑 在每个事件函数中添加动画效果]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[TypeScript入门]]></title>
      <url>%2F2017%2F01%2F25%2FTypeScript%E5%85%A5%E9%97%A8%2F</url>
      <content type="text"><![CDATA[关键词： 微软开发 JavaScript的超集 遵循ES6 angular2框架（谷歌开发）是由TypeScript编写的。 所以，TypeScript有这两家公司所支持，有可能成为前端脚本语言发展主流方向。 安装TypeScript开发环境 几个sublime text3 开发TypeScript的插件 1、T3S ，下载地址：https://github.com/Railk/T3S 不推荐使用，官网有说明，会有新版本出来，我配置半天也没实现自动编译，有配置成功的可以告诉我一声。 2、ArcticTypescript ,地址：https://github.com/Phaiax/ArcticTypescript ， 安装方法：打开sublime text3 ,Ctrl+Shift+p， 调出package control 窗口，输入install package ,回车 ，然后输入ArcticTypescript 即可。 编译依赖node.js，由于本人没有安装，所以没有使用这个，但也进行了配置，比较繁琐，官网有说明，需要配置：tsconfig.json 和 .sublimets（或project_name.sublime-project） 3、Better TypeScript ,地址：https://packagecontrol.io/packages/Better%20TypeScript 安装方法：打开sublime text3 ,Ctrl+Shift+p， 调出package control 窗口，输入install package ,回车 ，然后输入Better TypeScript 即可。 推荐使用这个，安装配置都很简单，无需安装node.js，安装完成后，在xx.ts文件上点右键，选择Better typeScript—&gt;compile file,即可生成js文件。 1.安装Package Controlhttps://packagecontrol.io/installation#s… 2.快捷键Ctrl + P输入 TypeScript 3.快捷键Ctrl + P输入 TypescriptCompletion 安装自动完成插件 4.快捷键Ctrl + P安装插件ArcticTypescripthttps://github.com/Phaiax/ArcticTypescript 选择AMD，Ctrl+B编译 表达式和循环 箭头表达式： 用来声明匿名函数，消除传统的匿名函数的this指针问题 forEach(), for in 和 for of]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[侧栏工具条开发]]></title>
      <url>%2F2017%2F01%2F24%2F%E4%BE%A7%E6%A0%8F%E5%B7%A5%E5%85%B7%E6%9D%A1%E5%BC%80%E5%8F%91%2F</url>
      <content type="text"><![CDATA[课前准备sass的基础知识Koala软件：http://koala-app.com/index-zh.html 输出方式：expanded展开 考拉编译时遇到中文报错： 在安装目录下 D:\Program Files (x86)\Koala\rubygems\gems\sass-3.4.9\lib\sass\engine.rb 在所有的require下面添加下面这句话，并保存： Encoding.default_external = Encoding.find(&apos;utf-8&apos;) 欧耶，koala不报错了！ RequireJS常用方法 requirejs.config requirejs define main.js //这个方法是用来定义别名的： requirejs.config({ paths: { jquery: &apos;jquery-1.11.3.min&apos; } }); requirejs([&apos;jquery&apos;, &apos;validate&apos;], function($, validate) { console.log(validate.isEqual(&apos;jenny&apos;, &apos;jenny&apos;)); }) 案例实现方式 使用背景图片的方式 使用图标字体的方式 利用before和after伪类的方式 公共mixin(不会被编译) _mixin.scss @mixin transition($transition) { -webkit-transition: $transition; -moz-transition: $transition; -ms-transition: $transition; -o-transition: $transition; transition: $transition; } @mixin transform-origin($origin) { -webkit-transform-origin: $origin; -moz-transform-origin: $origin; -ms-transform-origin: $origin; -o-transform-origin: $origin; transform-origin: $origin; } @mixin scale($scale) { -webkit-transform: scale($scale); -moz-transform: scale($scale); -ms-transform: scale($scale); -o-transform: scale($scale); transform: scale($scale); } @mixin opacity($opacity) { opacity: $opacity; filter: alpha(opacity=$opacity * 100); } _toolbar.scss @mixin toolbar-item($pos, $hoverPos) { background-position: 0 $pos; &amp;:hover { background-position: 0 $hoverPos; } } 1. 使用背景图片的方式优缺点及兼容性 HTML结构简单 兼容性良好，可以兼容到IE6 使用了大量图片，对性能有一定的影响，并且不利于修改 css样式整理-优化-分离和引入将写好的css样式相同的部分进行整理：通过@mixin index.scss @import &quot;mixin&quot;; @import &quot;toolbar&quot;; $toolbar-size: 52px; // 1. 使用背景图片的方式 .toolbar { position: fixed; left: 50%; bottom: 5px; margin-left: -$toolbar-size / 2; } .toolbar-item { position: relative; display: block; width: $toolbar-size; height: $toolbar-size; background-image: url(../img/toolbar.png); background-repeat: no-repeat; margin-top: 1px; @include transition(background-position 1s); &amp;:hover { .toolbar-layer { @include opacity(1); @include scale(1); } } } .toolbar-item-weixin { @include toolbar-item(-798px, -860px); .toolbar-layer { height: 212px; background-position: 0 0; } } .toolbar-item-feedback { @include toolbar-item(-426px, -488px); } .toolbar-item-app { @include toolbar-item(-550px, -612px); .toolbar-layer { height: 194px; background-position: 0 -222px; } } .toolbar-item-top { @include toolbar-item(-674px, -736px); } .toolbar-layer { position: absolute; right: $toolbar-size - 6; bottom: -10px; width: 172px; background-image: url(../img/toolbar.png); background-repeat: no-repeat; @include opacity(0); @include transform-origin(90% 90%); @include scale(0.01); @include transition(all 1s); } // 1. 使用背景图片的方式 2. 使用图标字体的方式优缺点及兼容性 避免了图片的使用，节约了性能，并且修改方便 HTML结构稍显复杂 不兼容IE6和IE7 index.scss @import &quot;mixin&quot;; @import &quot;toolbar&quot;; @import &quot;iconfont&quot;; $toolbar-size: 52px; // 2. 使用图标字体的方式 .toolbar-item, .toolbar-btn, .toolbar-icon, .toolbar-text { width: $toolbar-size; height: $toolbar-size; } .toolbar-icon, .toolbar-text { position: absolute; left: 0; color: #fff; text-align: center; @include transition(top 1s); } .toolbar { position: fixed; left: 50%; bottom: 5px; margin-left: -$toolbar-size / 2; } .toolbar-item { position: relative; display: block; margin-top: 1px; &amp;:hover { .toolbar-icon { top: -$toolbar-size; } .toolbar-text { top: 0; } .toolbar-layer { @include opacity(1); @include scale(1); } } } .toolbar-btn { position: absolute; left: 0; top: 0; overflow: hidden; } .toolbar-icon { top: 0; background-color: #d0d6d9; font-size: 30px; line-height: $toolbar-size; } .toolbar-text { top: $toolbar-size; background-color: #98a1a6; padding-top: 12px; font-size: 12px; line-height: 1.2; } .toolbar-layer { position: absolute; right: $toolbar-size - 6; bottom: -10px; width: 172px; background-image: url(../img/toolbar_img.png); background-repeat: no-repeat; @include opacity(0); @include transform-origin(90% 90%); @include scale(0.01); @include transition(all 1s); } .toolbar-layer-weixin { height: 212px; background-position: 0 0; } .toolbar-layer-app { height: 194px; background-position: 0 -222px; } // 2. 使用图标字体的方式 3. 利用before和after伪类的方式优缺点及兼容性 避免了图片的使用，节约了性能，并且修改方便 HTML结构简单，但css稍显复杂 不兼容IE6和IE7 这里要将下载下来的字体文件重新保存一份scss文件，否则koala会报错。 iconfont.scss @font-face { font-family: &quot;iconfont&quot;; src: url(&apos;font/iconfont.eot?t=1485250077902&apos;); /* IE9*/ /* IE6-IE8 */ /* chrome, firefox */ /* chrome, firefox, opera, Safari, Android, iOS 4.2+*/ src: url(&apos;font/iconfont.eot?t=1485250077902#iefix&apos;) format(&apos;embedded-opentype&apos;), url(&apos;font/iconfont.woff?t=1485250077902&apos;) format(&apos;woff&apos;), url(&apos;font/iconfont.ttf?t=1485250077902&apos;) format(&apos;truetype&apos;), url(&apos;font/iconfont.svg?t=1485250077902#iconfont&apos;) format(&apos;svg&apos;); /* iOS 4.1- */ } .iconfont { font-family: &quot;iconfont&quot; !important; font-size: 16px; font-style: normal; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } .icon-weixin:before { content: &quot;\e603&quot;; } .icon-xiaoxi:before { content: &quot;\e613&quot;; } .icon-top:before { content: &quot;\e688&quot;; } .icon-app1:before { content: &quot;\e602&quot;; } body { font-family: &apos;微软雅黑&apos;; } index.scss @import &quot;mixin&quot;; @import &quot;toolbar&quot;; @import &quot;iconfont&quot;; $toolbar-size: 52px; // 3. 利用before和after伪类的方式 .toolbar { position: fixed; left: 50%; bottom: 5px; margin-left: -$toolbar-size / 2; } .toolbar-item { position: relative; display: block; width: $toolbar-size; height: $toolbar-size; margin-top: 1px; &amp;:hover { .toolbar-btn { &amp;:before { top: -$toolbar-size; } &amp;:after { top: 0; } } &amp;:after { @include opacity(1); @include scale(1); } } &amp;:after { content: &apos;&apos;; position: absolute; right: $toolbar-size - 6; bottom: -10px; width: 172px; background-image: url(../img/toolbar_img.png); background-repeat: no-repeat; @include opacity(0); @include transform-origin(90% 90%); @include scale(0.01); @include transition(all 1s); } } .toolbar-btn { &amp;, &amp;:before, &amp;:after { width: $toolbar-size; height: $toolbar-size; position: absolute; left: 0; } &amp;:before, &amp;:after { content: &apos;&apos;; color: #fff; text-align: center; @include transition(top 1s); } top: 0; overflow: hidden; @extend .iconfont; &amp;:before { //icon top: 0; background-color: #d0d6d9; font-size: 30px; line-height: $toolbar-size; } &amp;:after { //text top: $toolbar-size; background-color: #98a1a6; font-size: 12px; line-height: 1.2; padding-top: 12px; white-space: pre-wrap; //content内文字换行 } } .toolbar-item-weixin { &amp;:after { content: &apos;&apos;; height: 212px; background-position: 0 0; } .toolbar-btn { /* &amp;:before { content: &quot;\e603&quot;; } */ @extend .icon-weixin; &amp;:after { content: &apos;公众\A账号&apos;; } } } .toolbar-item-feedback { .toolbar-btn { /* &amp;:before { content: &quot;\e613&quot;; } */ @extend .icon-xiaoxi; &amp;:after { content: &apos;意见\A反馈&apos;; } } } .toolbar-item-app { .toolbar-btn { /* &amp;:before { content: &quot;\e602&quot;; } */ @extend .icon-top; &amp;:after { content: &apos;APP\A下载&apos;; } } &amp;:after { content: &apos;&apos;; height: 194px; background-position: 0 -222px; } } .toolbar-item-top { .toolbar-btn { /* &amp;:before { content: &quot;\e688&quot;; } */ @extend .icon-top; &amp;:after { content: &apos;返回\A顶部&apos;; } } } // 3. 利用before和after伪类的方式 JS实现返回顶部按钮功能1.基本功能实现 main.js requirejs.config({ paths: { jquery: &apos;jquery-1.11.3.min&apos; } }); requirejs([&apos;jquery&apos;], function($) { checkPosition($(window).height()); //$(&apos;#backTop&apos;).on(&apos;click&apos;, move);//缓慢运动到达顶部 $(&apos;#backTop&apos;).on(&apos;click&apos;, go); //没有动画过程，直接到达顶部 $(window).on(&apos;scroll&apos;, function() { checkPosition($(window).height()); }); function move() { $(&apos;html, body&apos;).animation({ &apos;scrollTop&apos;: 0 }, 800); } function go() { $(&apos;html, body&apos;).scrollTop(0); } function checkPosition(pos) { if ($(window).scrollTop() &gt; pos) { console.log(&apos;fadeIn&apos;) $(&apos;#backTop&apos;).fadeIn(); } else { console.log(&apos;fadeOut&apos;) $(&apos;#backTop&apos;).fadeOut(); } } }); 2.将功能抽象成模块 scrollTo.js define([&apos;jquery&apos;], function($) { function ScrollTo(opts) { this.opts = $.extend({}, ScrollTo.DEFAULTS, opts); this.$el = $(&apos;html,body&apos;); } ScrollTo.prototype.move = function() { console.log(this); var opts = this.opts, dest = opts.dest; if ($(window).scrollTop() != dest &amp;&amp; !this.$el.is(&apos;:animated&apos;)) { this.$el.animate({ scrollTop: dest }, opts.speed); } }; ScrollTo.prototype.go = function() { var dest = this.opts.dest; if ($(window).scrollTop() != dest) { this.$el.scrollTop(dest); } }; ScrollTo.DEFAULTS = { dest: 0, speed: 800 } return { ScrollTo: ScrollTo } }); main.js requirejs([&apos;jquery&apos;, &apos;scrollTo&apos;], function($, scrollto) { // var scroll = new scrollto.ScrollTo({}); var scroll = new scrollto.ScrollTo({ dest: 50, speed: 2000 }); checkPosition($(window).height()); $(&apos;#backTop&apos;).on(&apos;click&apos;, $.proxy(scroll.move, scroll)); //缓慢运动到达顶部 //$(&apos;#backTop&apos;).on(&apos;click&apos;, scroll.go); //没有动画过程，直接到达顶部 $(window).on(&apos;scroll&apos;, function() { checkPosition($(window).height()); }); function checkPosition(pos) { if ($(window).scrollTop() &gt; pos) { $(&apos;#backTop&apos;).fadeIn(); } else { $(&apos;#backTop&apos;).fadeOut(); } } }); 3.封闭成工具条模块 backtop.js define([&apos;jquery&apos;, &apos;scrollto&apos;], function($, scrollto) { function BackTop(el, opts) { this.opts = $.extend({}, BackTop.DEFAULTS, opts); this.$el = $(el); this.scroll = new scrollto.ScrollTo({ dest: 0, speed: this.opts.speed }); if (this.opts.mode == &apos;move&apos;) { this.$el.on(&apos;click&apos;, $.proxy(this._move, this)); } else { this.$el.on(&apos;click&apos;, $.proxy(this._go, this)); } $(window).on(&apos;scroll&apos;, $.proxy(this._checkPosition, this)); } BackTop.prototype._move = function() { this.scroll.move(); }; BackTop.prototype._go = function() { this.scroll.go(); }; BackTop.prototype._checkPosition = function() { var $el = this.$el; if ($(window).scrollTop() &gt; this.opts.pos) { $el.fadeIn(); } else { $el.fadeOut(); } }; BackTop.DEFAULTS = { mode: &apos;move&apos;, pos: $(window).height(), speed: 800 } // 插件的写法 $.fn.extend({ backtop: function() { return this.each(function() { new BackTop(this, opts); }); } }) return { BackTop: BackTop } }); main.js requirejs([&apos;jquery&apos;, &apos;backtop&apos;], function($, backtop) { new backtop.BackTop($(&apos;#backTop&apos;), { mode: &apos;move&apos;, pos: 100, speed: 2000 }); }); 4.模块注册成jQuery插件 main.js requirejs([&apos;jquery&apos;, &apos;backtop&apos;], function($, backtop) { $(&apos;#backTop&apos;).BackTop({ mode: &apos;move&apos;, pos: 100, speed: 2000 }); }); backtop.js …… BackTop.DEFAULTS = { mode: &apos;move&apos;, pos: $(window).height(), speed: 800 } // 插件的写法 $.fn.extend({ backtop: function() { return this.each(function() { new BackTop(this, opts); }); } }) return { BackTop: BackTop }]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[怎样使用jQuery触发Select，Radio的change/onchange事件]]></title>
      <url>%2F2017%2F01%2F18%2F%E6%80%8E%E6%A0%B7%E4%BD%BF%E7%94%A8jQuery%E8%A7%A6%E5%8F%91Select%EF%BC%8CRadio%E7%9A%84change-onchange%E4%BA%8B%E4%BB%B6%2F</url>
      <content type="text"><![CDATA[&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head runat=&quot;server&quot;&gt; &lt;title&gt;test&lt;/title&gt; &lt;script src=&quot;jquery.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(document).ready(function() { $(&quot;.radioItem&quot;).change(function() { var $selectedvalue = $(&quot;input[name=&apos;rl$tt&apos;]:checked&quot;).val(); // alert($selectedvalue); if ($selectedvalue == 1) { alert(&apos;1&apos;); } else { alert(&apos;2&apos;); } }); }); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input id=&quot;rl_1&quot; class=&quot;radioItem&quot; checked=&quot;checked&quot; name=&quot;rl$tt&quot; type=&quot;radio&quot; value=&quot;1&quot; /&gt; &lt;label&gt;1&lt;/label&gt; &lt;input id=&quot;rl_2&quot; class=&quot;radioItem&quot; name=&quot;rl$tt&quot; type=&quot;radio&quot; value=&quot;2&quot; /&gt; &lt;label&gt;2&lt;/label&gt; &lt;/body&gt; &lt;/html&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[flex属性的继承问题]]></title>
      <url>%2F2017%2F01%2F18%2Fflex%E5%B1%9E%E6%80%A7%E7%9A%84%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%98%2F</url>
      <content type="text"><![CDATA[/*-webkit-box-align: center; -ms-flex-align: center; -webkit-align-items: center; align-items: center;*/ 这个属性会让他孩子的div里面的justify-content排版出现问题，这个属性让它的孩子都继承了，而且不能重新加属性排版布局。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[关于select,option选中]]></title>
      <url>%2F2017%2F01%2F18%2F%E5%85%B3%E4%BA%8Eselect-option%E9%80%89%E4%B8%AD%2F</url>
      <content type="text"><![CDATA[默认要将东京选中（不能在option标签中加selected的方法） &lt;a href=&quot;#&quot; class=&quot;item-link smart-select&quot; data-searchbar=&quot;false&quot; data-searchbar-placeholder=&quot;请选择收货城市&quot;&gt; &lt;select name=&quot;收货城市&quot; id=&quot;DeliverCity&quot;&gt; &lt;option value=&apos;爱知县&apos;&gt;爱知县&lt;/option&gt; &lt;option value=&apos;北海道&apos;&gt;北海道&lt;/option&gt; &lt;option value=&apos;兵库县&apos;&gt;兵库县&lt;/option&gt; &lt;option value=&apos;冲绳&apos;&gt;冲绳&lt;/option&gt; &lt;option value=&apos;大阪&apos;&gt;大阪&lt;/option&gt; &lt;option value=&apos;东京&apos;&gt;东京&lt;/option&gt; &lt;option value=&apos;福冈&apos;&gt;福冈&lt;/option&gt; &lt;option value=&apos;和歌山县&apos;&gt;和歌山县&lt;/option&gt; &lt;option value=&apos;京都&apos;&gt;京都&lt;/option&gt; &lt;option value=&apos;静冈&apos;&gt;静冈&lt;/option&gt; &lt;option value=&apos;奈良&apos;&gt;奈良&lt;/option&gt; &lt;option value=&apos;岐阜县&apos;&gt;岐阜县&lt;/option&gt; &lt;option value=&apos;千叶县&apos;&gt;千叶县&lt;/option&gt; &lt;option value=&apos;山梨县&apos;&gt;山梨县&lt;/option&gt; &lt;option value=&apos;神奈川&apos;&gt;神奈川&lt;/option&gt; &lt;/select&gt; &lt;div class=&quot;item-content&quot;&gt; &lt;div class=&quot;item-inner&quot;&gt; &lt;div class=&quot;item-title&quot;&gt;收货城市&lt;/div&gt; &lt;div class=&quot;item-after&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/a&gt; //$(&quot;#DeliverCity&quot;).find(&quot;option[value=&apos;东京&apos;]&quot;).attr(&quot;selected&quot;, true);这个语句不执行，改成下面就好了 $(&apos;#DeliverCity&apos;)[0].options[5].selected = true;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[得到 URL 中的path 和 query 参数]]></title>
      <url>%2F2017%2F01%2F10%2F%E5%BE%97%E5%88%B0URL%E4%B8%AD%E7%9A%84query%E5%8F%82%E6%95%B0%2F</url>
      <content type="text"><![CDATA[得到 URL 中的 query 参数 function getArguments(){ var args={}; var query=window.location.search.substring(1); var pairs=query.split(&quot;&amp;&quot;); for(var i=0;i&lt;pairs.length;i++){ var pos=pairs[i].indexOf(&apos;=&apos;); if(pos==-1) continue; var argname=pairs[i].substring(0,pos); var value=decodeURIComponent(pairs[i].substring(pos+1)); args[argname]=value; } return args; } 获取url中path的goods的id var path = window.location.pathname; var value = path.replace(/[^0-9]/ig, &quot;&quot;);]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[webpack学习笔记]]></title>
      <url>%2F2017%2F01%2F05%2Fwebpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[webpack和gulp，grunt的比较安装webpack因为webpack是一个基于node的项目，所以先装好node和npm。 npm install -g webpack 目的把有依赖关系的各种文件打包成一系列的静态资源。——module bundler。简单点说，webpack就是一个配置文件，所有的魔力都是在这一个文件中发生的。这个配置文件主要分为三大块： entry入口文件：让webpack用哪个文件作为项目的入口 output出口：让webpack把处理完成的文件放在哪里 module模块：要用什么不同的模块来处理各种类型的文件 建立项目F:\&gt;mkdir webpack-demo //建一个文件夹 F:\&gt;cd webpack-demo //进入文件夹 F:\webpack-demo&gt;npm init This utility will walk you through creating a package.json file. It only covers the most common items, and tries to guess sensible defaults. See `npm help json` for definitive documentation on these fields and exactly what they do. Use `npm install &lt;pkg&gt; --save` afterwards to install a package and save it as a dependency in the package.json file. Press ^C at any time to quit. name: (webpack-demo) version: (1.0.0) description: a wbpack demo created by shen jennie entry point: (index.js) test command: git repository: keywords: webpack author: shen jennie license: (ISC) About to write to F:\webpack-demo\package.json: { &quot;name&quot;: &quot;webpack-demo&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;a wbpack demo created by shen jennie&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: { &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot; }, &quot;keywords&quot;: [ &quot;webpack&quot; ], &quot;author&quot;: &quot;shen jennie&quot;, &quot;license&quot;: &quot;ISC&quot; } Is this ok? (yes) yes F:\webpack-demo&gt; 如果你使用git管理你的这个项目的话，建议你新建一个.gitignore文件，不要让git提交一些node依赖的模块， 你也可以参考github的例子 https://github.com/github/gitignore/blob/master/Node.gitignore 我们这里就简单一点 node_modules 项目结构现在项目里面就有一个package.json， 我们多加一点东西，慢慢丰富它的内容。 /app index.js sub.js package.json webpack.config.js 添加了两个js文件，添加了最重要的webpack的配置文件，我们还是从非常简单的hello world开始玩起，webpack原生直接支持AMD和CommonJS两种格式，如果你想使用ES6的风格，这点以后再提。 JS代码sub.js// 我们这里使用CommonJS的风格 function generateText() { var element = document.createElement(&apos;h2&apos;); element.innerHTML = &quot;Hello h2 world&quot;; return element; } module.exports = generateText; index.jsvar sub = require(&quot;./sub&quot;); var app = document.createElement(&apos;div&apos;); app.innerHTML = &apos;&lt;h1&gt;Hello World&lt;/h1&gt;&apos;; app.appendChild(sub()); document.body.appendChild(app); 配置Webpack现在开始配置webpack，目标是把这两个js文件合并成一个文件. 我们可以自己在build文件夹里面手动建一个index.html文件夹，然后再把合并以后的js引用在里面，但是这样有些麻烦，所以我们这里安装一个plugin，可以自动快速的帮我们生成HTML。 npm install html-webpack-plugin --save-dev 好 有了这个插件 开始写config文件 var path = require(&apos;path&apos;); var HtmlwebpackPlugin = require(&apos;html-webpack-plugin&apos;); // 定义了一些文件夹的路径 var ROOT_PATH = path.resolve(__dirname); var APP_PATH = path.resolve(ROOT_PATH, &apos;app&apos;); var BUILD_PATH = path.resolve(ROOT_PATH, &apos;build&apos;); module.exports = { // 项目的文件夹 可以直接用文件夹名称 默认会找index.js 也可以确定是哪个文件名字 entry: APP_PATH, // 输出的文件名，合并以后的js会命名为bundle.js output: { path: BUILD_PATH, filename: &apos;bundle.js&apos; }, // 添加我们的插件，会自动生成一个html文件 plugins: [ new HtmlwebpackPlugin({ title: &apos;Hello world app&apos; }) ] }; 然后在项目根目录运行 webpack 终端显示一堆信息，然后告诉你成功了。 你可以使用webpack –help看看一些运行的时候可选的参数 你会发现多出来一个build文件夹，直接点开里面的html文件，你会发现我们可爱的“hello world”已经插入到页面了。我们的任务完成了，成功生成html，合并js，html引入了js，js被执行了。 配置webpack-dev-server上面任务虽然完成了，但是我们要不断运行程序然后查看页面，所以最好新建一个开发服务器，可以serve我们pack以后的代码，并且当代码更新的时候自动刷新浏览器。 安装webpack-dev-server npm install webpack-dev-server --save-dev 安装完毕后 在config中添加配置 module.exports = { .... devServer: { historyApiFallback: true, hot: true, inline: true, progress: true, }, ... } 然后再package.json里面配置一下运行的命令,npm支持自定义一些命令 ... &quot;scripts&quot;: { &quot;start&quot;: &quot;webpack-dev-server --hot --inline&quot; }, ... 好了，万事具备了，在项目根目录下输入npm start,一堆花花绿绿的信息后server已经起来了，在浏览器里面输入http://localhost:8080 发现伟大的hello world出现了，在js里面随便修改一些输出然后保存, boom!浏览器自动刷新，新的结果出现了。 拓展阅读 如果你的服务器端使用的是express框架，你还可以直接安装express的middleware，webpack配合express，很好用。 npm install webpack-dev-middleware --save-dev 添加CSS样式现在来添加一些样式，webpack使用loader的方式来处理各种各样的资源，比如说样式文件，我们需要两种loader，css-loader 和 style－loader，css-loader会遍历css文件，找到所有的url(…)并且处理。style-loader会把所有的样式插入到你页面的一个style tag中。 安装我们的loader npm install css-loader style-loader --save-dev devServer: { historyApiFallback: true, hot: true, inline: true, progress: true, }, ... module: { loaders: [ { test: /\.css$/, loaders: [&apos;style&apos;, &apos;css&apos;], include: APP_PATH } ] }, ... plugins: [ new HtmlwebpackPlugin({ title: &apos;Hello World app&apos; }) ] 看loaders的书写方式，test里面包含一个正则，包含需要匹配的文件，loaders是一个数组，包含要处理这些程序的loaders，这里我们用了css和style，注意loaders的处理顺序是从右到左的，这里就是先运行css-loader然后是style-loader. 新建一个样式文件 main.css h1 { color: red; } 记得在入口文件index.js中引用 require(&apos;./main.css&apos;); 然后发现标题变成红色的了，webpack的理念是基于项目处理的，把对应的文件格式给对应的loader处理，然后你就不用管了，它会决定怎么压缩，编译。 重新启动 npm start 那现在想使用一些有爱的css预编译程序，来点sass吧。 你可能已经想到了，再来个loader就行啦，确实是这样简单。 npm install sass-loader --save-dev 稍微修改一下config，删掉我们先前添加的css规则，加上下面的loader { test: /\.scss$/, loaders: [&apos;style&apos;, &apos;css&apos;, &apos;sass&apos;], include: APP_PATH }, UNMET PEER DEPENDENCY node-sass@^3.4.2 || ^4.0.0 报错：缺少依赖模块 npm install node-sass –save-dev会出现很多ERR,重新执行npm install node-sass –save-dev,第二次就成功了！ 添加两个sass文件，variables.scss和main.scss在index.js中引用 require(‘./main.scss’);然后发现标题如愿变红，相当简单吧。 处理图片和其他静态文件这个和其他一样，也许你也已经会玩了。安装loader，处理文件。诸如图片，字体等等，不过有个神奇的地方它可以根据你的需求将一些图片自动转成base64编码的，为你减轻很多的网络请求。 安装url-loader npm install url-loader --save-dev +– UNMET PEER DEPENDENCY file-loader@* 报了这个错，按照提示安装 npm install file-loader –save-dev 配置config文件 module: { loaders: [{ test: /\.scss$/, loaders: [&apos;style&apos;, &apos;css&apos;, &apos;sass&apos;], include: APP_PATH }, { test: /\.(png|jpg)$/, loader: &apos;url?limit=40000&apos; }] } 注意后面那个limit的参数，当你图片大小小于这个限制的时候，会自动启用base64编码图片。 下面举个栗子。 新建一个imgs文件夹，往里面添加一张照片。在scss文件中添加如下的东西。 @import &apos;./variables.scss&apos;; h1 { color: $red; background: url(&apos;./imgs/5.jpg&apos;); } h2 { background: url(&apos;./imgs/avatar.jpg&apos;); } npm start, 然后查看图片的url，发现神奇。 添加第三方库有的时候还想来点jquery，moment，undersocre之类的库，webpack可以非常容易的做到这一点，有谣言说Bower即将停止开发了, 作者推荐都使用npm来管理依赖。那么我们现在安装在我们的app中添加jquery和moment的支持。 npm install jquery moment --save-dev 在js中引用 // 添加第三方库 var $ = require(&apos;jquery&apos;); var moment = require(&apos;moment&apos;); var div = document.createElement(&apos;div&apos;); div.innerHTML = &apos;&lt;h1&gt;Hello World! it&lt;/h1&gt;&apos;; $(&apos;body&apos;).append(div); $(&apos;body&apos;).append(&apos;&lt;p&gt;look at me! now is &apos; + moment().format() + &apos;&lt;/p&gt;&apos;); npm start, 然后查看http://localhost:8080/。看看浏览器，成功！ jquery和moment现在都起作用了！ 添加ES6的支持如果现在你的项目还没有对ES6的语法支持，那就有点没有逼格了，其实大家都知道这个也很简单，因为我们有伟大的Babel 首先 装各种loader npm install babel-loader babel-preset-es2015 --save-dev 配置我们的config文件 ... { test: /\.jsx?$/, loader: &apos;babel&apos;, include: APP_PATH, query: { presets: [&apos;es2015&apos;] } }, ... es2015这个参数是babel的plugin，可以支持各种最新的es6的特性，具体的情况看这个链接。 Babel es2015 plugin 现在我们可以改掉CommonJS风格的文件了。 sub.js export default function() { var element = document.createElement(&apos;h2&apos;); element.innerHTML = &quot;Hello h2 world hahahahha&quot;; return element; } index.js import &apos;./main.scss&apos;; import generateText from &apos;./sub&apos;; import $ from &apos;jquery&apos;; import moment from &apos;moment&apos;; let app = document.createElement(&apos;div&apos;); const myPromise = Promise.resolve(42); myPromise.then((number) =&gt; { $(&apos;body&apos;).append(&apos;&lt;p&gt;promise result is &apos; + number + &apos; now is &apos; + moment().format() + &apos;&lt;/p&gt;&apos;) }); app.innerHTML = &apos;&lt;h1&gt;Hello World it&lt;/h1&gt;&apos;; document.body.appendChild(app); app.appendChild(generateText()); 报错了：+– UNMET PEER DEPENDENCY babel-core@^6.0.0 npm install babel-core –save-dev 我们上面测试了import, export，const，let，promise等一系列es6的特性。 最后完美的输出界面。 原作者：张轩链接：https://zhuanlan.zhihu.com/p/20367175来源：知乎本文只是为了学习，记录自己实践的流程。外加上自己遇到的一些问题的解决方法。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Framework7开发笔记]]></title>
      <url>%2F2017%2F01%2F04%2FFramework7%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[1、触发返回键的时候，获取当前页面内容 myApp.getCurrentView() 获取当前页面名字： myApp.getCurrentView().activePage.name 2、关闭所以弹出层 myApp.hidePreloader(); 3、JS代码执行返回 mainView.router.back(); 4、自定义触发事件时弹出页面 mainView.router.loadPage(&apos;demo.html&apos;); 5、获取上一个页面通过url传递过来的参数比如：demo.html?id=1234&amp;key=3454 myApp.onPageInit(&apos;movie-detail&apos;, function(e) { var page = e.query; myApp.alert(page.id); myApp.alert(page.key); }); 6、判断是iOS还是Android设备 //app.js // Initialize your app var myApp = new Framework7(); // Export selectors engine var $$ = Dom7; // Determine theme depending on device var isAndroid = Framework7.prototype.device.android === true; var isIos = Framework7.prototype.device.ios === true; // Set Template7 global devices flags /*Template7.global = { android: isAndroid, ios: isIos };*/ // Change Through navbar layout to Fixed /*if (isAndroid) { // Change class $$(&apos;.view.navbar-through&apos;).removeClass(&apos;navbar-through&apos;).addClass(&apos;navbar-fixed&apos;); // And move Navbar into Page $$(&apos;.view .navbar&apos;).prependTo(&apos;.view.page&apos;); }*/ 或者可以用UA拿设备 var ua = navigator.userAgent.toLowerCase(); var isIos, isAndroid; if (/iphone|ipad|ipod/.test(ua)) { isIos = true; } else if (/android/.test(ua)) { isAndroid = true; } var myApp = new Framework7({ material: isAndroid ? true : false, materialRipple: false, imagesLazyLoadPlaceholder: &quot;/Images/placeholder.jpg&quot;, imagesLazyLoadSequential: true, imagesLazyLoadThreshold: 50, smartSelectBackOnSelect: true }); var $$ = Dom7; // Add view var mainView = myApp.addView(&apos;.view-main&apos;, {}); // Add CSS Styles if (isAndroid) { $$(&apos;head&apos;).prepend(&apos;&lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/F7/css/framework7.material.min.css&quot;&gt;&apos;); $$(&apos;head&apos;).append(&apos;&lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/sjn/less/my-app.material.css&quot;&gt;&apos;); } else { $$(&apos;head&apos;).prepend(&apos;&lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/F7/css/framework7.ios.min.css&quot;&gt;&apos;); $$(&apos;head&apos;).append(&apos;&lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/sjn/less/my-app.material.css&quot;&gt;&apos;); } 7、把选中的添加到数组前面，没选中的排下面因为创建一个对象和数组的方式，消耗内存，所以用jquery的prepend和append直接插入目标节点。 $.ajax({ type: &quot;GET&quot;, cache: false, url: url, data: param, dataType: &quot;html&quot;, success: function (res) { hotel_list = eval(&quot;(&quot; + res + &quot;)&quot;); if (hotel_list.length == 0) return; var item_template = $(&quot;#Template_HotelItem&quot;); //var selected; //var noSelected=[]; //var arrHotel = []; $.each(hotel_list, function (i, item) { var newitem = item_template.clone(true); newitem.removeAttr(&quot;id&quot;); newitem.removeAttr(&quot;style&quot;); newitem.find(&quot;.hotel_id&quot;).text(item.hotelid); newitem.find(&quot;.hotel_name&quot;).text(item.namechs); newitem.find(&quot;.hotel_name_pinyin&quot;).text(item.namechs); newitem.find(&quot;.hotel_postcode&quot;).text(item.postcode); newitem.find(&quot;.hotel_address&quot;).text(item.addresschs); newitem.find(&quot;input[name=&apos;RdHotel&apos;]&quot;).val(i + 1); if (sessionStorage.userHotleId &amp;&amp; sessionStorage.userHotleId == item.hotelid.toString()) { newitem.find(&quot;.RdHotel&quot;).attr(&quot;checked&quot;, &quot;checked&quot;); //selected = newitem; //arrHotel.unshift(newitem); $(&quot;#HotelList&quot;).prepend(newitem); } else { //arrHotel.push(newitem); $(&quot;#HotelList&quot;).append(newitem); } }); //if (selected) //{ // $(&quot;#HotelList&quot;).append(selected); //} //$.each(arrHotel, function (i, item) { // $(&quot;#HotelList&quot;).append(item); //}); myApp.hideIndicator(); }, error: function (xhr, ajaxOptions, thrownError) { myApp.hideIndicator(); } });]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[移动端样式小技巧（4）——模拟滚动]]></title>
      <url>%2F2016%2F12%2F23%2F%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%A0%B7%E5%BC%8F%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%884%EF%BC%89%E2%80%94%E2%80%94%E6%A8%A1%E6%8B%9F%E6%BB%9A%E5%8A%A8%2F</url>
      <content type="text"><![CDATA[模拟滚动也是在项目中遇到的常见布局。布局要求弹层出来后，弹层中的内容可以滚动，弹层背后的列表不能随弹层滚动而滚动。并且在弹层上滑动的时候，整个页面也不能随之滚动。 经过前几步的练习，以下是我做的小demo。 先贴图： 图一 图二 html：&lt;div class=&quot;father&quot;&gt; &lt;!--页面内容、蒙层、蒙层中的内容互为兄弟节点，防止点击时页面穿透--&gt; &lt;section class=&quot;content-body&quot;&gt; &lt;ul&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;item&quot;&gt; &lt;div class=&quot;left-container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt; &lt;!--页面内容、蒙层、蒙层中的内容互为兄弟节点，防止点击时页面穿透--&gt; &lt;section class=&quot;layout&quot; style=&quot;display:none;&quot;&gt; &lt;/section&gt; &lt;!--页面内容、蒙层、蒙层中的内容互为兄弟节点，防止点击时页面穿透--&gt; &lt;section class=&quot;layout-body&quot; style=&quot;display:none;&quot;&gt; &lt;ul class=&quot;area&quot;&gt; &lt;li class=&quot;area-all&quot;&gt; &lt;span&gt;全部&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;area-item&quot;&gt; &lt;span&gt;北京&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;area-item&quot;&gt; &lt;span&gt;上海&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;area-item&quot;&gt; &lt;span&gt;广州&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;area-item&quot;&gt; &lt;span&gt;深圳&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;area-item&quot;&gt; &lt;span&gt;成都&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;area-item&quot;&gt; &lt;span&gt;武汉&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;area-item&quot;&gt; &lt;span&gt;四川&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;area-item&quot;&gt; &lt;span&gt;江西&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;area-item&quot;&gt; &lt;span&gt;河南&lt;/span&gt; &lt;/li&gt; &lt;li class=&quot;area-item&quot;&gt; &lt;span&gt;贵州&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/section&gt; &lt;/div&gt; css：body, p, ul, li { padding: 0; margin: 0; } * { box-sizing: border-box; } /*item的样式*/ .item { padding: 0 10px; } .left-container { position: relative; display: flex; flex-direction: column; width: 140px; } .item::after { content: &apos;&apos;; display: block; margin-top: 5px; width: 100%; height: 0; border-top: 1px solid #999; } .pic { display: block; width: 100%; height: auto; } .top-container { position: absolute; left: 0; top: 0; z-index: 999; display: flex; height: 20px; /*font-size: 0;原本是为了解决间隙问题；因为有了display: flex;这个就不需要了；*/ overflow: hidden; } .top-word { height: 20px; line-height: 20px; padding-left: 10px; overflow: hidden; background-color: #ff0; font-size: 10px; text-align: center; -webkit-line-clamp: 1; white-space: nowrap; text-overflow: ellipsis; } .triangle { display: inline-block; /* 控制宽高为0，用border宽度撑出一个三角形 */ width: 0; height: 0; border-left: 8px solid #ff0; border-top: 20px solid #ff0; border-right: 8px solid transparent; border-bottom: 20px solid transparent; } .bottom-word { overflow: hidden; width: 100%; font-size: 10px; background-color: #999; padding: 10px 0; text-align: center; -webkit-line-clamp: 1; white-space: nowrap; text-overflow: ellipsis; } /*这次demo的重点，蒙层*/ .father { width: 100%; height: 100%; /* 页面高度设置为屏幕高度，正常情况下超出滚动 */ overflow-y: scroll; } .content-body { width: 100%; height: 100%; /* 内容高度设置为屏幕高度，正常情况下超出滚动 */ overflow-y: scroll; /*一定要加下面的2个属性，否则蒙层出现，这个content-body还是能滚动*/ position: absolute; z-index: 10; } .layout { height: 100%; width: 100%; position: fixed; left: 0; right: 0; top: 0; bottom: 0; background: rgba(0, 0, 0, 0.7); overflow: hidden; z-index: 1000000; } .layout-body { height: 46%; width: 100%; position: fixed; left: 0; right: 0; bottom: 0; background: rgba(255, 255, 255, 1); overflow: scroll; z-index: 1000001; } .area-all { font-size: 30px; color: #f00; text-align: center; } .area-item { padding: 10px; font-size: 26px; line-height: 30px; text-align: center; } .area-all:hover, .area-item:hover { background-color: #999; color: #fff; } &gt;这个方法虽然实现了页面模拟滚动的效果，但是当蒙层弹出的时候设置了overflow:hidden会导致页面scrollTop变成0，页面相当于被滚到顶部了。如果UI或者PM不愿意，请与他们撕逼。 这里最需要注意的，就是.content-body一定要让它脱离文档流。如果没有定位，是没有z-index的。这个问题我也不造怎么说，反正就是不加这两个属性，蒙层出来，.content-body还是能滚动，overflow: hidden;没起作用。希望大神赐教！ .content-body { width: 100%; height: 100%; /* 内容高度设置为屏幕高度，正常情况下超出滚动 */ overflow-y: scroll; /*一定要加下面的2个属性，否则蒙层出现，这个content-body还是能滚动*/ position: absolute; z-index: 10; } JavaScript： &lt;script src=&quot;jquery-2.1.0.js&quot;&gt;&lt;/script&gt; &lt;script&gt; // 事件代理 /*$(document).on(&apos;click&apos;, &quot;.item&quot;, function(e) { $(&quot;.layout&quot;).show(); $(&quot;.layout-body&quot;).show(); })*/ // 直接绑定 $(&quot;.item&quot;).on(&apos;click&apos;, function(e) { $(&quot;.layout&quot;).show(); $(&quot;.layout-body&quot;).show(); $(&quot;.father&quot;).css(&quot;overflow-y&quot;, &quot;hidden&quot;); $(&quot;.content-body&quot;).css(&quot;overflow-y&quot;, &quot;hidden&quot;); }); $(&quot;.layout&quot;).on(&quot;click&quot;, function(e) { $(this).hide(); $(&quot;.layout-body&quot;).hide(); $(&quot;.father&quot;).css(&quot;overflow-y&quot;, &quot;scroll&quot;); $(&quot;.content-body&quot;).css(&quot;overflow-y&quot;, &quot;scroll&quot;); }); $(&quot;.area-item&quot;).on(&quot;click&quot;, function(e) { $(&quot;.layout&quot;).hide(); $(&quot;.layout-body&quot;).hide(); }) &lt;/script&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[移动端样式小技巧（3）——n宫格布局排列]]></title>
      <url>%2F2016%2F12%2F23%2F%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%A0%B7%E5%BC%8F%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%883%EF%BC%89%E2%80%94%E2%80%94n%E5%AE%AB%E6%A0%BC%E5%B8%83%E5%B1%80%E6%8E%92%E5%88%97%2F</url>
      <content type="text"><![CDATA[众所周知，元素有3种基本显示框类型，block块级，inline-block行内块级，inline行内。inline-block是一种特殊存在，可以设置宽高也可以使元素在一行排列。 这两种布局都可以用float:left来写，但是浮动完了还需要清楚浮动。所以可以直接把元素设置成inline-block同样可以自动排列 注意，写的时候一定要把文字固定高度，因为不固定的话，两种方法的布局都会出现形变。 借鉴原作者的写法，我有两种写法： 第一种： 设置每个col-25的宽度为25%，并设置他们为行内块元素，这会引起换行（因为每个行内元素外面会有间隙，所以会因为一行排满而换行），这就需要在外面的容器设置font-size: 0; html：&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-25&quot;&gt; &lt;img src=&quot;img/1.png&quot; alt=&quot;&quot; class=&quot;pic&quot;&gt; &lt;p class=&quot;word&quot;&gt;跟团游&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;col-25&quot;&gt; &lt;img src=&quot;img/2.png&quot; alt=&quot;&quot; class=&quot;pic&quot;&gt; &lt;p class=&quot;word&quot;&gt;自由行&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;col-25&quot;&gt; &lt;img src=&quot;img/3.png&quot; alt=&quot;&quot; class=&quot;pic&quot;&gt; &lt;p class=&quot;word&quot;&gt;邮轮&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;col-25&quot;&gt; &lt;img src=&quot;img/4.png&quot; alt=&quot;&quot; class=&quot;pic&quot;&gt; &lt;p class=&quot;word&quot;&gt;主题游&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-25&quot;&gt; &lt;img src=&quot;img/5.png&quot; alt=&quot;&quot; class=&quot;pic&quot;&gt; &lt;p class=&quot;word&quot;&gt;签证&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;col-25&quot;&gt; &lt;img src=&quot;img/6.png&quot; alt=&quot;&quot; class=&quot;pic&quot;&gt; &lt;p class=&quot;word&quot;&gt;WIFI&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;col-25&quot;&gt; &lt;img src=&quot;img/7.png&quot; alt=&quot;&quot; class=&quot;pic&quot;&gt; &lt;p class=&quot;word&quot;&gt;预售&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;col-25&quot;&gt; &lt;img src=&quot;img/8.png&quot; alt=&quot;&quot; class=&quot;pic&quot;&gt; &lt;p class=&quot;word&quot;&gt;同程专线&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; css：body, p { padding: 0; margin: 0; } body { background: #ccc; } .container { background: #fff; } .row { /*1.去除子元素，因为设置行内块级inline-block产生的间隙*/ font-size: 0; } .row + .row { margin-top: 5px; } .col-25 { /* 2.设置行内块级 */ display: inline-block; /* 3.设置宽度为1/4 */ width: 25%; font-size: 12px; text-align: center; box-sizing: border-box; padding: 0 20px; } .pic { display: block; width: 100%; height: auto; } .word { padding: 5px; height: 18px; line-height: 18px; overflow: hidden; /*4.设置元素超出隐藏*/ text-overflow: ellipsis; /*5.设置超出样式为省略号*/ -webkit-line-clamp: 1; /*6.设置2行应用省略*/ white-space: nowrap; } 第二种： html结构和第一种相同，下图可以看出，这两种写法效果是相同的。它比第一种写法方便，利用弹性盒子，和box-sizing: border-box;里面图片自适应设备屏幕。 css：body, p { padding: 0; margin: 0; } body { background: #ccc; } .container { background: #fff; } .row { /*1.使用弹性盒子布局，无需font-size:0;无需将子元素宽度设置width: 25%;*/ display: flex; justify-content: space-around; } .row + .row { margin-top: 5px; } .col-25 { display: inline-block; font-size: 12px; text-align: center; box-sizing: border-box; padding: 0 20px; } .pic { display: block; width: 100%; height: auto; } .word { padding: 5px; height: 18px; line-height: 18px; overflow: hidden; /*2.设置元素超出隐藏*/ text-overflow: ellipsis; /*3.设置超出样式为省略号*/ -webkit-line-clamp: 1; /*4.设置2行应用省略*/ white-space: nowrap; } 但这个方法因为没有把图片的宽度定下来，所以极端屏幕下（屏幕足够小），布局会有问题,如下图所示： 所以我个人推荐，还是使用第一种方法来写布局和样式。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[移动端样式小技巧（1）——角标的实现]]></title>
      <url>%2F2016%2F12%2F23%2F%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%A0%B7%E5%BC%8F%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94%E8%A7%92%E6%A0%87%E7%9A%84%E5%AE%9E%E7%8E%B0%2F</url>
      <content type="text"><![CDATA[参考了http://mp.weixin.qq.com/s/CFUn73w3s6Uc8fATZYJE_A 所写的角标的实现，以下是我自己的写法同样能够达到效果。图一是.top-container未加overflow: hidden;的样子；图二是最终效果图。 html：&lt;div class=&quot;container&quot;&gt; &lt;p class=&quot;top-container&quot;&gt; &lt;span class=&quot;top-word&quot;&gt;跟团游&lt;/span&gt; &lt;span class=&quot;triangle&quot;&gt;&lt;/span&gt; &lt;/p&gt; &lt;img class=&quot;pic&quot; src=&quot;img/scenic.jpg&quot; alt=&quot;&quot;&gt; &lt;p class=&quot;bottom-word&quot;&gt; 上海出发世纪东方卡就是看到雷锋 &lt;/p&gt; &lt;/div&gt; css：body, p { padding: 0; margin: 0; } .container { position: relative; display: flex; flex-direction: column; width: 140px; } .pic { display: block; width: 100%; height: auto; } .top-container { position: absolute; left: 0; top: 0; z-index: 999; display: flex; height: 20px; /*font-size: 0;原本是为了解决间隙问题；因为有了display: flex;这个就不需要了；*/ overflow: hidden; } .top-word { height: 20px; line-height: 20px; padding-left: 10px; overflow: hidden; background-color: #ff0; font-size: 10px; text-align: center; -webkit-line-clamp: 1; white-space: nowrap; text-overflow: ellipsis; } .triangle { display: inline-block; /* 控制宽高为0，用border宽度撑出一个三角形 */ width: 0; height: 0; border-left: 8px solid #ff0; border-top: 20px solid #ff0; border-right: 8px solid transparent; border-bottom: 20px solid transparent; } .bottom-word { overflow: hidden; width: 100%; font-size: 10px; background-color: #999; padding: 10px 0; text-align: center; -webkit-line-clamp: 1; white-space: nowrap; text-overflow: ellipsis; }]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[移动端样式小技巧（2）——图文标题+左右宽度自适应]]></title>
      <url>%2F2016%2F12%2F23%2F%E7%A7%BB%E5%8A%A8%E7%AB%AF%E6%A0%B7%E5%BC%8F%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E5%9B%BE%E6%96%87%E6%A0%87%E9%A2%98%2B%E5%B7%A6%E5%8F%B3%E5%AE%BD%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%2F</url>
      <content type="text"><![CDATA[一些常见的布局例如图+文案的，有多种方式可以去写，比如padding-left+background或者position+padding-left或者before伪元素。前两种方法都可以把图片做到绝对的垂直居中，但是它们都是相对整行的容器进行定位的，由于line-height兼容问题的坑，图片实际上不一定会和文字对齐。如果有图文对齐的需求的话，个人建议才用before伪元素来布局，before可以相对文案来定位。 借鉴原作者的写法，发现了另外一个小技巧：利用伪类before和after生成的图片我们很难去让他们与文字一起垂直居中（文字垂直居中相信大家都知道：line-height===height。这里我利用background-size: contain;/这里把背景图片尺寸设置成contain，不需要考虑图片拉伸的问题/；height: 44px;等于容器的高度；随后vertical-align: top or bottom都没关系了，因为图片的容器已经和外面的容器在一条线上了。 html：&lt;ul&gt; &lt;li class=&quot;ent-li&quot;&gt; &lt;p class=&quot;left&quot;&gt;热门线路sdgdgs水电费广东省分公司的山东干发的&lt;/p&gt; &lt;div class=&quot;right&quot;&gt;100000000009999999999999999999999999999999999999988&lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;ent-li&quot;&gt; &lt;p class=&quot;left&quot;&gt;热门线路sdgdgs水电费广东省分公司的山东干发的&lt;/p&gt; &lt;div class=&quot;right&quot;&gt;100000000009999999999999999999999999999999999999988&lt;/div&gt; &lt;/li&gt; &lt;li class=&quot;ent-li&quot;&gt; &lt;p class=&quot;left&quot;&gt;热门线路sdgdgs水电费广东省分公司的山东干发的&lt;/p&gt; &lt;div class=&quot;right&quot;&gt;100000000009999999999999999999999999999999999999988&lt;/div&gt; &lt;/li&gt; &lt;/ul&gt; css：body, p, ul, li { margin: 0; padding: 0; } ul, li { list-style: none; } /* 图文标题 */ li+li { border-top: 1px solid #999; } p.left { flex: 1; text-align: left; height: 44px; line-height: 44px; font-size: 16px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; } p.left::before { content: &apos;&apos;; display: inline-block; background: url(&quot;img/icon.png&quot;) center center no-repeat; background-size: contain; /*这里把背景图片尺寸设置成contain，不需要考虑图片拉伸的问题*/ width: 28px; height: 44px; vertical-align: top; /*or vertical-align: bottom; 这里因为height和容器的height设成了一致的，所以vertical-align：top或者bottom都无所谓了。*/ margin-right: 5px; } /* 左右宽度自适应 */ .ent-li { margin: 0 45px; height: 44px; display: flex; } .ent-li::after { content: &apos;&apos;; background: url(&apos;img/arrow.png&apos;) center center no-repeat; background-size: contain; width: 22px; height: 44px; } .right { flex: 1; text-align: right; line-height: 44px; font-size: 12px; color: #999; padding-left: 10px; } 图中的布局实际上是分左右两块的，依照ui的需求，文案是要左对齐，数字是要右对齐的。你可能最先想到的是把右侧的数字定位或者浮动到那，左侧的容器加上个margin-right或者padding-right。这样可以实现，但是两侧的文案有极端情况出现。 #####flex:1;的作用是让这部分的宽度width在外部容器固定的情况下，随意变形，让另外一边的宽度随里面的内容的增大，通俗点将，就是我这边去适应另外一边，那边我不管你怎么变，你变宽我就瘦一点，你瘦了我就可以放我的东西了。 #####看你看中那一边了，如果数字重要，就让文案去自适应，数字有多长就多长，像这边例子的写法；如果注重文案，就让数字去自适应，文案应该也不能太长了，不然数字就没了。。。。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[两个div一行。3个缝相等;同时，两个div不设高度等高显示。]]></title>
      <url>%2F2016%2F12%2F22%2F%E4%B8%A4%E4%B8%AAdiv%E4%B8%80%E8%A1%8C%E3%80%823%E4%B8%AA%E7%BC%9D%E7%9B%B8%E7%AD%89-%E5%90%8C%E6%97%B6%EF%BC%8C%E4%B8%A4%E4%B8%AAdiv%E4%B8%8D%E8%AE%BE%E9%AB%98%E5%BA%A6%E7%AD%89%E9%AB%98%E6%98%BE%E7%A4%BA%E3%80%82%2F</url>
      <content type="text"><![CDATA[######悟空第一次问我这个问题的时候，首相想到的是用弹性盒子模型。使用了justify-content：space-between/space-around。发现这两个属性不能实现这个效果。 ##### ######既然两个div是block块级元素，那么display：flex;还是可以使用的，（因为如果用inline-block，中间会有一条缝，根据不同浏览器渲染出不同效果）。由此，想到了栅格布局，其实就是利用百分比。 左边第一个div的margin-left是margin-right的两倍；右边第二个div的margin-right是margin-left的两倍；这个四个加起来再加上两个div的宽度，应该正好等于100%。 ######index.html: &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;child one&quot; style=&quot;background:red&quot;&gt; Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sint cupiditate, quo! Quibusdam quae aperiam quo aspernatur distinctio, atque deserunt, laboriosam iusto! Nihil omnis deserunt, molestiae, cupiditate aperiam ipsum iste ea? &lt;/div&gt; &lt;div class=&quot;child two&quot; style=&quot;background:yellow&quot;&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ipsum iusto optio rerum facere voluptas natus asperiores officia maxime veniam quo? Qui ipsam aspernatur quam maiores natus dolorum ullam fugiat distinctio. Lorem ipsum dolor sit amet, consectetur adipisicing elit. Similique fuga laboriosam alias aut eligendi nostrum, sint voluptatem nihil vitae vel dignissimos, dolorum doloremque. Ex odio, quis soluta at delectus tempore. &lt;/div&gt; &lt;/div&gt; css: body { padding: 0; margin: 0; } .container { display: flex; /*align-items: center;*/ /*justify-content: space-between;*/ background-color: blue; } .child { width: 44%; } .one { margin-left: 4%; margin-right: 2%; } .two { margin-left: 2%; margin-right: 4%; }]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Js控制iphone端的input/textarea元素失去焦点时隐藏键盘]]></title>
      <url>%2F2016%2F12%2F22%2F%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E5%89%8D%E4%B8%80%E4%B8%AApage%E7%9A%84input%E6%B2%A1%E6%9C%89%E5%A4%B1%E5%8E%BB%E7%84%A6%E7%82%B9%EF%BC%8C%E9%94%AE%E7%9B%98%E6%B2%A1%E6%9C%89%E6%94%B6%E4%B8%8B%E5%8E%BB%EF%BC%8C%E4%BC%9A%E5%AF%BC%E8%87%B4%E7%84%A6%E7%82%B9%E5%AD%98%E5%9C%A8%E7%AC%AC%E4%BA%8C%E4%B8%AApage%2F</url>
      <content type="text"><![CDATA[问题描述： 单页应用前一个page的input没有失去焦点，键盘没有收下去,会导致焦点存在第二个page解决方法: $(&quot;#txtNewFriendSearch&quot;).on(&quot;keydown keypress keyup&quot;, function (event) { $(&quot;#txtTelSearch&quot;).html($(&quot;#txtNewFriendSearch&quot;).val()); if (event.keyCode == 13) { findJgoUser(); $(this).blur();//失去焦点 } }); 注意点 只写keyup，会导致“删除”的时候，$(“#txtTelSearch”).html($(“#txtNewFriendSearch”).val());这个value不是实时的。 只写keydown，会导致input输入的时候，$(“#txtTelSearch”)显示获取到的$(“#txtNewFriendSearch”).val()少个一个数字，删除的时候少一个数字。 键盘监听事件的顺序：keydown &gt; keypress &gt; keyup。具体细节：http://www.cnblogs.com/xcsn/p/3413074.html]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[js判断是否在微信浏览器中打开]]></title>
      <url>%2F2016%2F12%2F22%2Fjs%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E5%9C%A8%E5%BE%AE%E4%BF%A1%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E6%89%93%E5%BC%80%2F</url>
      <content type="text"><![CDATA[用JS来判断,无论是android 还是iphone，ipad 都可以 function is_weixn(){ var ua = navigator.userAgent.toLowerCase(); if(ua.match(/MicroMessenger/i)==&quot;micromessenger&quot;) { return true; } else { return false; } }]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F09%2F25%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo+Github托管：搭建自己的博客]]></title>
      <url>%2F2016%2F09%2F21%2FHexo-Github%E6%89%98%E7%AE%A1%EF%BC%9A%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[Hexo是一个快速、简洁且高效的博客框架，而Github是一个免费的代码托管工具，利用Github Page可以免费创建一个静态网站。下面将介绍如何使用Hexo和Github，在win10环境下搭建一个静态的博客。安装和配置Hexo及Github安装Hexo安装Hexo前，需要安装以下： Node.js Git 如果已经安装完成以上程序，打开Git-bash或者cmd，输入 npm install -g hexo-cli 即可完成Hexo的安装。 使用Hexo进行本地建站选择一个本地的文件夹，如 D:\hexo。 输入 hexo init D:\hexo cd D:\hexo npm install 如果hexo安装成功，则在D:\hexo文件夹下的文件目录为 . ├── _config.yml // 网站的配置信息，你可以在此配置大部分的参数。 ├── package.json ├── scaffolds // 模板文件夹。当你新建文章时，Hexo会根据scaffold来建立文件。 ├── source // 存放用户资源的地方 | ├── _drafts | └── _posts └── themes // 存放网站的主题。Hexo会根据主题来生成静态页面。 详细文件或文件夹的具体含义见 Hexo官方文档之建站https://hexo.io/zh-cn/docs/setup.html 为了测试本地建站是否成功，输入 hexo s 如果显示如下 则说明本地建站成功，访问本地地址可以看到Hexo默认主题的效果。 至此，Hexo的安装和本地建站完成，如需更加深入全面地了解Hexo，可访问Hexo官方文档。 创建Github账号如果已经注册Github，可跳过此步骤。否则，访问Github官网进行注册，下面假设你注册Github账号名为MyGithub。 创建与账号同名的Repository注册并登陆Github官网成功后，点击页面右上角的+，选择 New repository。 在Repository name中填写你的Github账号名.github.io，这里是MyGithub.github.io。Description中填写对此repository的描述信息(可选，但建议填写，如Personal website)。 点击Create repository，完成创建。 配置SSH(1) 生成SSH 检查是否已经有SSH Key，打开Git Bash，输入 cd ~/.ssh 如果没有这个目录，则生成一个新的SSH，输入 ssh-keygen -t rsa -C &quot;your e-mail&quot; 其中，your e-mail是你注册Github时用到的邮箱。 然后接下来几步都直接按回车键，最后生成如下（这里要特别注意：在哪个路径下，输入哪个命令） (2) 复制公钥内容到Github账户信息中 打开~/.ssh/id_rsa.pub文件，复制里面的内容； 打开Github官网，登陆后进入到个人设置(点击头像-&gt;setting)，点击右侧的SSH Keys，点击Add SSH key；填写title之后，将之前复制的内容粘贴到Key框中，最后点击Add key即可。 (3) 测试SSH是否配置成功 输入 ssh -T git@github.com 如果显示以下，则说明ssh配置成功。 Hi username! You’ve successfully authenticated, but GitHub does notprovide shell access. 将网站发布到Github的同名repository中 打开D:\Hexo文件夹中的_config.yml文件，找到如下位置，填写 deploy: type: git repository: git@github.com:MyGithub/MyGithub.github.io,master 注： (1) 其中MyGithub替换成你的Github账户; (2) 注意在yml文件中，:后面都是要带空格的。 此时，通过访问http://MyGithub.github.io可以看到默认的Hexo首页面（与之前本地测试时一样）。]]></content>
    </entry>

    
  
  
</search>
